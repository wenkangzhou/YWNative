__d(function(e,o,n,r){"use strict";function s(e){var o=S(e);return o&&o.viewConfig&&("AndroidTextInput"===o.viewConfig.uiViewClassName||"RCTTextView"===o.viewConfig.uiViewClassName||"RCTTextField"===o.viewConfig.uiViewClassName)}var l=o(237),t=o(295),i=(o(50),o(61)),d=o(71),a=o(296),c=o(63),p=o(64),h=o(18),u=o(111),S=u.getInstanceFromNode,m=o(40),R=m.ScrollViewManager,T=o(22),b=16,f={mixins:[a.Mixin],scrollResponderMixinGetInitialState:function(){return{isTouching:!1,lastMomentumScrollBeginTime:0,lastMomentumScrollEndTime:0,observedScrollSinceBecomingResponder:!1,becameResponderWhileAnimating:!1}},scrollResponderHandleScrollShouldSetResponder:function(){return this.state.isTouching},scrollResponderHandleStartShouldSetResponder:function(e){var o=c.currentlyFocusedField();return"handled"===this.props.keyboardShouldPersistTaps&&null!=o&&e.target!==o},scrollResponderHandleStartShouldSetResponderCapture:function(e){var o=c.currentlyFocusedField(),n=this.props.keyboardShouldPersistTaps,r=!n||"never"===n;return!(!r||null==o||s(e.target))||this.scrollResponderIsAnimating()},scrollResponderHandleResponderReject:function(){},scrollResponderHandleTerminationRequest:function(){return!this.state.observedScrollSinceBecomingResponder},scrollResponderHandleTouchEnd:function(e){var o=e.nativeEvent;this.state.isTouching=0!==o.touches.length,this.props.onTouchEnd&&this.props.onTouchEnd(e)},scrollResponderHandleResponderRelease:function(e){this.props.onResponderRelease&&this.props.onResponderRelease(e);var o=c.currentlyFocusedField();this.props.keyboardShouldPersistTaps===!0||"always"===this.props.keyboardShouldPersistTaps||null==o||e.target===o||this.state.observedScrollSinceBecomingResponder||this.state.becameResponderWhileAnimating||(this.props.onScrollResponderKeyboardDismissed&&this.props.onScrollResponderKeyboardDismissed(e),c.blurTextInput(o))},scrollResponderHandleScroll:function(e){this.state.observedScrollSinceBecomingResponder=!0,this.props.onScroll&&this.props.onScroll(e)},scrollResponderHandleResponderGrant:function(e){this.state.observedScrollSinceBecomingResponder=!1,this.props.onResponderGrant&&this.props.onResponderGrant(e),this.state.becameResponderWhileAnimating=this.scrollResponderIsAnimating()},scrollResponderHandleScrollBeginDrag:function(e){t.beginScroll(),this.props.onScrollBeginDrag&&this.props.onScrollBeginDrag(e)},scrollResponderHandleScrollEndDrag:function(e){var o=e.nativeEvent.velocity;this.scrollResponderIsAnimating()||o&&(0!==o.x||0!==o.y)||t.endScroll(),this.props.onScrollEndDrag&&this.props.onScrollEndDrag(e)},scrollResponderHandleMomentumScrollBegin:function(e){this.state.lastMomentumScrollBeginTime=Date.now(),this.props.onMomentumScrollBegin&&this.props.onMomentumScrollBegin(e)},scrollResponderHandleMomentumScrollEnd:function(e){t.endScroll(),this.state.lastMomentumScrollEndTime=Date.now(),this.props.onMomentumScrollEnd&&this.props.onMomentumScrollEnd(e)},scrollResponderHandleTouchStart:function(e){this.state.isTouching=!0,this.props.onTouchStart&&this.props.onTouchStart(e)},scrollResponderHandleTouchMove:function(e){this.props.onTouchMove&&this.props.onTouchMove(e)},scrollResponderIsAnimating:function(){var e=Date.now(),o=e-this.state.lastMomentumScrollEndTime,n=o<b||this.state.lastMomentumScrollEndTime<this.state.lastMomentumScrollBeginTime;return n},scrollResponderGetScrollableNode:function(){return this.getScrollableNode?this.getScrollableNode():d.findNodeHandle(this)},scrollResponderScrollTo:function(e,o,n){if("number"==typeof e)console.warn("`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.");else{var r=e||{};e=r.x,o=r.y,n=r.animated}p.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(),p.RCTScrollView.Commands.scrollTo,[e||0,o||0,n!==!1])},scrollResponderScrollToEnd:function(e){var o=(e&&e.animated)!==!1;p.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(),p.RCTScrollView.Commands.scrollToEnd,[o])},scrollResponderScrollWithoutAnimationTo:function(e,o){console.warn("`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead"),this.scrollResponderScrollTo({x:e,y:o,animated:!1})},scrollResponderZoomTo:function(e,o){if(T(R&&R.zoomToRect,"zoomToRect is not implemented"),"animated"in e)var o=e.animated,e=babelHelpers.objectWithoutProperties(e,["animated"]);else"undefined"!=typeof o&&console.warn("`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead");R.zoomToRect(this.scrollResponderGetScrollableNode(),e,o!==!1)},scrollResponderScrollNativeHandleToKeyboard:function(e,o,n){this.additionalScrollOffset=o||0,this.preventNegativeScrollOffset=!!n,p.measureLayout(e,d.findNodeHandle(this.getInnerViewNode()),this.scrollResponderTextInputFocusError,this.scrollResponderInputMeasureAndScrollToKeyboard)},scrollResponderInputMeasureAndScrollToKeyboard:function(e,o,n,r){var s=l.get("window").height;this.keyboardWillOpenTo&&(s=this.keyboardWillOpenTo.endCoordinates.screenY);var t=o-s+r+this.additionalScrollOffset;this.preventNegativeScrollOffset&&(t=Math.max(0,t)),this.scrollResponderScrollTo({x:0,y:t,animated:!0}),this.additionalOffset=0,this.preventNegativeScrollOffset=!1},scrollResponderTextInputFocusError:function(e){console.error("Error measuring text field: ",e)},componentWillMount:function(){var e=this.props.keyboardShouldPersistTaps;h("boolean"!=typeof e,"'keyboardShouldPersistTaps={"+e+"}' is deprecated. "+("Use 'keyboardShouldPersistTaps=\""+(e?"always":"never")+"\"' instead")),this.keyboardWillOpenTo=null,this.additionalScrollOffset=0,this.addListenerOn(i,"keyboardWillShow",this.scrollResponderKeyboardWillShow),this.addListenerOn(i,"keyboardWillHide",this.scrollResponderKeyboardWillHide),this.addListenerOn(i,"keyboardDidShow",this.scrollResponderKeyboardDidShow),this.addListenerOn(i,"keyboardDidHide",this.scrollResponderKeyboardDidHide)},scrollResponderKeyboardWillShow:function(e){this.keyboardWillOpenTo=e,this.props.onKeyboardWillShow&&this.props.onKeyboardWillShow(e)},scrollResponderKeyboardWillHide:function(e){this.keyboardWillOpenTo=null,this.props.onKeyboardWillHide&&this.props.onKeyboardWillHide(e)},scrollResponderKeyboardDidShow:function(e){e&&(this.keyboardWillOpenTo=e),this.props.onKeyboardDidShow&&this.props.onKeyboardDidShow(e)},scrollResponderKeyboardDidHide:function(e){this.keyboardWillOpenTo=null,this.props.onKeyboardDidHide&&this.props.onKeyboardDidHide(e)}},y={Mixin:f};n.exports=y},294);